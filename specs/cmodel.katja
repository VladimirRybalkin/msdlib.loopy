/*
    Katja
    Copyright (C) 2003-2009 see README file for authors

    This program is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    This program is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with this program.  If not, see <http://www.gnu.org/licenses/>.
*/
specification Model

backend java {
    package de.hopp.generator.model
    import java.lang.String
    import java.lang.Boolean
    import java.lang.Integer
}

root MFile InFile

external String
external Boolean
external Integer


// file and class model

MFile ( String name, MDefinitions defs, MStructs structs, MEnums enums, MAttributes attributes, MProcedures methods, MClasses classes )
MClass ( MDocumentation doc, MModifiers modifiers, String name, MTypes extend, 
	 MStructs structs, MEnums enums, MAttributes attributes, MMethods methods, MClasses nested )
MModifier = PRIVATE() | PUBLIC() | CONSTANT() | STATIC() | INLINE() // don't know if more are required
// modifiers obviously allow invalid combinations. We rely on the programmer to refrain from using these


// struct and enum model

MDefinition ( MDocumentation doc, String name, String value )
MStruct     ( MDocumentation doc, MModifiers modifiers, String name, MAttributes attributes )
MEnum       ( MDocumentation doc, MModifiers modifiers, String name, Strings values ) // TODO maybe add code fragments here...
                                                              // --> MValue(String name, String value), MValues * MValue


// attribute model

MAttribute ( MDocumentation doc, MModifiers modifiers, MAnyType type, String name, MCodeFragment initial )
MCodeFragment ( String part, MIncludes needed )


// method model

MProcedure ( MDocumentation doc, MModifiers modifiers, MReturnType returnType, String name, MParameters parameter, /* MTypes exceptions, */ MCode body )
MReturnType = MAnyType // note, that this allows array types to be used for return values
            | MVoid()  // however, introducing a new type would be overkill here
//            | MConstr  // we rely on the programmer to refrain from creating such types

MParameter ( MParamType refType, MAnyType type, String name )
MParamType = VALUE() | REFERENCE() | CONSTREF()
MCode ( Strings lines, MIncludes needed )

// constructors and destructors
MConstr ( MDocumentation doc, MModifiers modifiers, MParameters parameter, MInit init, MCode body )
MDestr  ( MDocumentation doc, MModifiers modifiers, MParameters parameter, MCode body )

MInit   ( MConstrCall con, MMemberInits vals ) // call one super constructor followed by a 
                                               // list of member initialisations
MMemberInit  ( String param, String val )
MConstrCall ( String name, Strings params )

MMethod = MProcedure | MConstr | MDestr

// type system model

MAnyType = MType ( String name, Strings doc )
//       | StructType ( String name, Strings importNames ) // can also be done with "usual" type by adding "struct "
//       | EnumType ( String name, Strings importNames )   // can also be done with "usual" type by adding "enum "
         | MArrayType ( MAnyType type, Integer length )
         | MPointerType ( MAnyType type )
         | MConstPointerType ( MAnyType type )

MInclude ( String name, MIncludeType type )

MIncludeType = QUOTES() | BRACKETS()// | FWDDEF() // not sure if this suffices, i.e., if only structs can (or should) be referenced here...

// documentation
MDocumentation ( Strings doc, MTags tags )

MTag = DEPRECATED( Strings details )
     | SEE ( String see )
     | PARAM ( String name, Strings details )
     | RETURN ( Strings details )

// list types

Strings             * String
MFiles              * MFile
MClasses            * MClass
MModifiers          * MModifier
MDefinitions        * MDefinition
MStructs            * MStruct
MEnums              * MEnum
MAttributes         * MAttribute
MProcedures         * MProcedure
MMethods            * MMethod
MParameters         * MParameter
MTypes              * MType
MIncludes           * MInclude
MTags               * MTag
MMemberInits        * MMemberInit
