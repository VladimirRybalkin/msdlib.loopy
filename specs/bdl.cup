package de.hopp.generator.frontend;

import java_cup.runtime.*;

/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init();              :};
//scan with {: return getScanner().next_token(); :};

parser code {:
//  protected BDLFile board = BDL.BDLFile(BDL.Imports(), BDL.Backends(), BDL.Options(), BDL.DEFAULT(), BDL.Medium("", ""), BDL.Cores(), BDL.GPIOs());
//
//  public BDLFile getBDLFile() {
//    return board;
//  }
:}

/* terminals */
terminal BEGIN, END, CBEGIN, CEND;
terminal IMPORT;
terminal HOST, BOARD, PROJECT;
terminal SWQUEUE, HWQUEUE;
terminal MEDIUM, MAC, IP, MASK, GATE, PORT;
terminal CORE, SOURCE;
terminal IN, OUT, WIDTH, POLL;
terminal GPIO, INSTANCE, BIND;
terminal SCHEDULER;
terminal String CODE, STR;
terminal String ID, HEX, VER;
terminal Integer DEC;

/* non terminals */
non terminal BDLFile file;
non terminal Import imp;
non terminal Backend backend;
non terminal Medium medium;
non terminal Option option;
non terminal Core core;
non terminal String version;
non terminal String source;
non terminal Port port;
non terminal Instance instance;
non terminal Binding bind;
non terminal Scheduler scheduler;

non terminal Decl decl;
non terminal Decls decl_list;
non terminal Strings source_list;
non terminal Ports port_list;
non terminal inst_decl;
non terminal gpio_callback;
non terminal bind_list;

/* grammar */
start with file;

file ::= decl_list:l {:
  Imports imports     = BDL.Imports();
  Backends backends   = BDL.Backends();
  Options opts        = BDL.Options();
  Cores cores         = BDL.Cores();
  GPIOs gpios         = BDL.GPIOs();
  Instances insts     = BDL.Instances();
  Medium medium       = BDL.Medium("", "");
  Scheduler scheduler = BDL.DEFAULT();
  for(Decl d : l) {
         if(d instanceof Import)    { imports.add((Import)d); }
    else if(d instanceof Backend)   { backends.add((Backend)d); }
    else if(d instanceof Option)    { opts.add((Option)d); }
    else if(d instanceof Core)      { cores.add((Core)d); }
    else if(d instanceof GPIO)      { gpios.add((GPIO)d); }
    else if(d instanceof Instance)  { insts.add((Instance)d); }
    else if(d instanceof Medium)    { medium = (Medium)d; }       // TODO catch duplicates
    else if(d instanceof Scheduler) { scheduler = (Scheduler)d; } // TODO catch duplicates
  }

  RESULT = BDL.BDLFile(imports, backends, opts, cores, gpios, insts, medium, scheduler);
:};

decl_list ::= decl:d decl_list:l {: RESULT = l.appFront(d); :}
            | {: RESULT = BDL.Decls(); :};

decl ::= imp:i       {: RESULT = i; :}
       | backend:b   {: RESULT = b; :}
       | option:o    {: RESULT = o; :}
       | core:c      {: RESULT = c; :}
       | instance:i  {: RESULT = i; :}
       | medium:m    {: RESULT = m; :}
       | scheduler:s {: RESULT = s; :}
       ;

imp ::= IMPORT ID:id {: RESULT = BDL.Import(id); :};

backend ::= HOST    ID:i {: RESULT = BDL.Backend(i); :}
          | BOARD   ID:i {: RESULT = BDL.Backend(i); :}
          | PROJECT ID:i {: RESULT = BDL.Backend(i); :}
          ;

medium ::= MEDIUM {: :};

option ::= SWQUEUE DEC:d {: RESULT = BDL.SWQUEUE(d); :}
         | HWQUEUE DEC:d {: RESULT = BDL.HWQUEUE(d); :}
         | WIDTH DEC:d   {: RESULT = BDL.BITWIDTH(d); :}
         | POLL          {: RESULT = BDL.POLL(); :}
         ;

core ::= CORE ID:id version:v BEGIN source_list:s port_list:p END {: RESULT = BDL.Core(id, s, p); :};

source_list ::= source:s source_list:l {: l.appFront(s); :}
              | {: RESULT = BDL.Strings(); :}
              ;

port_list ::= port:p port_list:l {: l.appFront(p); :}
            | {: RESULT = BDL.Ports(); :}
            ;

version ::= DEC:a DEC:b ID:c {: :}
          | DEC:a VER:b ID:c {: :}
          ;

source ::= SOURCE ID:id {: RESULT = id; :};

port   ::= IN  ID:id {: RESULT = BDL.IN();  :} // +port options
         | OUT ID:id {: RESULT = BDL.OUT(); :} // +port options
         ;

instance ::= INSTANCE ID:core ID:id inst_decl {: :}
           | GPIO ID:id gpio_callback {: :}
           ;

inst_decl ::= BEGIN bind_list END
            | ;

bind_list ::= bind bind_list
            | ;

bind ::= BIND ID:port ID:axis {: :};

gpio_callback ::= CBEGIN CODE CEND
                | ;

scheduler ::= SCHEDULER CBEGIN CODE:c CEND {: :};

