package de.hopp.generator.frontend;

import java_cup.runtime.*;
import de.hopp.generator.exceptions.ParserError;
import de.hopp.generator.ErrorCollection;

/* Preliminaries to set up and use the scanner.  */
//init with {: scanner.init(); :};
//scan with {: return getScanner().next_token(); :};

action code {:
  void error(String message, int line, int column) {
    parser.errors.addError(new ParserError("Syntax Error: " + message, parser.filename, line));
  }

  Position pos(int line) {
     return BDL.Position(parser.filename, line);
  }
:}

parser code {:
//  protected BDLFile board = BDL.BDLFile(BDL.Imports(), BDL.Backends(), BDL.Options(), BDL.DEFAULT(), BDL.Medium("", ""), BDL.Cores(), BDL.GPIOs());
//
//  public BDLFile getBDLFile() {
//    return board;
//  }

  String filename;

  ErrorCollection errors;

  public void setFilename(String filename) {
    this.filename = filename;
  }

  public void setErrorCollection(ErrorCollection errors) {
    this.errors = errors;
  }

  public void report_error(String message, Object info) {

    int linenumber = -1;
    if(info instanceof Symbol) {
      Symbol symbol = (Symbol)info;
      linenumber = symbol.left;
    }
    errors.addError(new ParserError(message, filename, linenumber));
  }

  public void syntax_error(Symbol cur_token) {
    report_error("Syntax Error in BDL file", cur_token);
  }

  public void unrecovered_syntax_error(Symbol cur_token) {
    errors.addError(new ParserError("Fatal Error: Couldn't repair and continue parse", filename, -1));
    done_parsing();
  }
:}

/* terminals */
terminal BEGIN, END, CBEGIN, COMMA;
terminal String CEND;
terminal IMPORT;
terminal HOST, BOARD, PROJECT;
terminal SWQUEUE, HWQUEUE, WIDTH, POLL;
terminal MEDIUM, MAC, IP, MASK, GATE;
terminal CORE, SOURCE, PORT;
terminal IN, OUT, DUAL;
terminal GPIO, INSTANCE, BIND, CPU;
terminal SCHEDULER;
terminal String STRING_LITERAL;
terminal String ID, VER;
terminal Integer DEC;

/* non terminals */
non terminal BDLFile file;
non terminal Import imp;
non terminal Backend backend;
non terminal Medium medium;
non terminal Option option;
non terminal MOption medium_option;
non terminal Core core;
non terminal String version;
non terminal Import source;
non terminal Port port;
non terminal Instance instance;
non terminal GPIO gpio;
non terminal Bindings bind;
non terminal Scheduler scheduler;

non terminal Decl decl;
non terminal Decls decl_list;
non terminal Imports source_list;
non terminal Ports port_list;
non terminal Bindings inst_decl;
non terminal Bindings bind_list;
non terminal Bindings bind_list_part;
non terminal String code_block;
non terminal Options option_list, option_list_part;
non terminal MOptions medium_option_list, medium_option_list_part;
non terminal Direction direct;


/* grammar */
start with file;

file ::=
     decl_list:l
     {:
         Imports imports     = BDL.Imports();
         Backends backends   = BDL.Backends();
         Options opts        = BDL.Options();
         Cores cores         = BDL.Cores();
         GPIOs gpios         = BDL.GPIOs();
         Instances insts     = BDL.Instances();
         Medium medium       = BDL.NONE();
         Scheduler scheduler = BDL.DEFAULT();
         for(Decl d : l) {
                if(d instanceof Import)   {  imports =  imports.add((Import)d);   }
           else if(d instanceof Backend)  { backends = backends.add((Backend)d);  }
           else if(d instanceof Option)   {     opts =     opts.add((Option)d);   }
           else if(d instanceof Core)     {    cores =    cores.add((Core)d);     }
           else if(d instanceof Instance) {    insts =    insts.add((Instance)d); }
           else if(d instanceof GPIO)     {    gpios =    gpios.add((GPIO)d);     }
           else if(d instanceof Medium)   {
             // TODO catch duplicates?
             // check, if the medium is already defined. If so, throw exception
             medium = (Medium)d;
           }
           else if(d instanceof Scheduler) { 
             if(scheduler instanceof USER_DEFINED) error("Duplicate Scheduler", lleft, lright);
             scheduler = (Scheduler)d;
           }
         }
       
         RESULT = BDL.BDLFile(imports, backends, opts, cores, gpios, insts, medium, scheduler);
     :}
  ;

decl_list ::=
     decl:d decl_list:l
     {:
         RESULT = l.appFront(d);
     :}
  |
     {:
         RESULT = BDL.Decls();
     :}
  ;

decl ::= 
     imp:i       {: RESULT = i; :}
  |  backend:b   {: RESULT = b; :}
  |  option:o    {: RESULT = o; :}
  |  core:c      {: RESULT = c; :}
  |  instance:i  {: RESULT = i; :}
  |  gpio:g      {: RESULT = g; :}
  |  medium:m    {: RESULT = m; :}
  |  scheduler:s {: RESULT = s; :}
  ;

imp ::=
     IMPORT ID:id
     {:
         RESULT = BDL.Import(id, pos(idleft));
     :}
  ;

backend ::=
     HOST    ID:id {: RESULT = BDL.Backend(id, pos(idleft)); :}
  |  BOARD   ID:id {: RESULT = BDL.Backend(id, pos(idleft)); :}
  |  PROJECT ID:id {: RESULT = BDL.Backend(id, pos(idleft)); :}
  ;

option_list ::=
     BEGIN option_list_part:l END
     {:
         RESULT = l;
     :}
  |  
     {:
         RESULT = BDL.Options();
     :}
  ;

option_list_part ::=
     option:o option_list_part:l
     {:
         RESULT = l.appFront(o);
     :}
  | 
     {:
         RESULT = BDL.Options();
     :}
  ;

option ::=
     SWQUEUE DEC:d
     {:
         RESULT = BDL.SWQUEUE(d);
     :}
  |  HWQUEUE DEC:d
     {:
         RESULT = BDL.HWQUEUE(d);
     :}
  |  WIDTH DEC:d
     {:
         RESULT = BDL.BITWIDTH(d);
     :}
  |  POLL
     {:
         RESULT = BDL.POLL();
     :}
  ;

core ::=
     CORE ID:id version:v BEGIN source_list:s port_list:p END
     {:
         RESULT = BDL.Core(id, v, pos(idleft), s, p);
     :}
  ;

version ::=
     DEC:a VER:b VER:c
     {:
         RESULT = String.valueOf(a) + b + c;
     :}
  ;

source_list ::=
     source:s source_list:l
     {:
         RESULT = l.appFront(s);
     :}
  |
     {:
         RESULT = BDL.Imports();
     :}
  ;

source ::=
     SOURCE STRING_LITERAL:path
     {:
         RESULT = BDL.Import(path, pos(pathleft));
     :}
  ;

port_list ::=
     port:p port_list:l
     {:
         RESULT = l.appFront(p);
     :}
  | 
     {:
         RESULT = BDL.Ports();
     :}
  ;

port   ::=
     PORT direct:d  ID:id  option_list:opts
     {: 
         RESULT = BDL.Port(id, d, pos(idleft), opts);
     :}
  ;

instance ::=
     INSTANCE ID:core ID:id inst_decl:b
     {:
         RESULT = BDL.Instance(id, core, pos(idleft), b);
     :}
  ;

gpio ::=
     GPIO direct:d ID:id code_block:cb
     {:
         RESULT = BDL.GPIO(id, d, pos(idleft), cb);
     :}
  |  GPIO ID:id code_block:cb
     {:
         error("GPIO specification is missing a direction attribute", idleft, idright);
     :}
  ;

direct ::=
     IN   {: RESULT = BDL.IN();   :}
  |  OUT  {: RESULT = BDL.OUT();  :}
  |  DUAL {: RESULT = BDL.DUAL(); :}
  |  ID:i
     {:
         error("unknown direction specifier \"" + i + "\"", ileft, iright); RESULT = BDL.IN();
     :}
  ;

inst_decl ::=
     BEGIN bind_list:l END
     {:
         RESULT = l;
     :}
  |
     {:
         RESULT = BDL.Bindings();
     :}
  ;

bind_list ::=
     bind:b bind_list:l
     {:
         RESULT = b.addAll(l);
     :}
  |
     {:
         RESULT = BDL.Bindings();
     :}
  ;

bind_list_part ::=
     COMMA ID:port bind_list_part:l
     {:
         RESULT = l.appFront(BDL.CPUAxis(port, pos(portleft)));
     :}
  |  COMMA ID:port
     {:
         RESULT = BDL.Bindings(BDL.CPUAxis(port, pos(portleft), BDL.Options()));
     :}
  ;

bind ::=
     BIND ID:port ID:axis option_list:opts
     {:
         RESULT = BDL.Bindings(BDL.Axis(axis, port, pos(portleft), opts));
     :}
  |  CPU ID:port option_list:opts
     {:
         RESULT = BDL.Bindings(BDL.CPUAxis(port, pos(portleft), opts));
     :}
  |  CPU ID:port bind_list_part:l
     {:
         RESULT = l.appFront(BDL.CPUAxis(port, pos(portleft)));
     :}
  ;

code_block ::=
     CBEGIN CEND:c
     {:
         RESULT = c;
     :}
  |  CBEGIN:b error
     {:
         error("could not find matching closing code bracket", bleft, bright);
         RESULT = "";
     :}
  |  BEGIN:b error CEND
     {:
         error("expected code block but found declaration block", bleft, bright);
         RESULT = "";
     :}
  |
     {:
         RESULT = "";
     :}
  ;

medium ::= // TODO
     MEDIUM ID:id medium_option_list:mol
     {: 
         switch(id) {
           case "ethernet": RESULT = BDL.ETHERNET(mol); break;
           case "uart"    : RESULT = BDL.UART(mol); break;
           case "pcie"    : RESULT = BDL.PCIE(mol); break;
           default        : error("unknown medium " + id, idleft, idright);
         }
     :}
  ;

medium_option_list ::=
     BEGIN medium_option_list_part:mol END
     {:
         RESULT = mol;
     :}
  |  
     {:
         RESULT = BDL.MOptions();
     :}
  ;

medium_option_list_part ::=
     medium_option:mo medium_option_list_part:mol
     {:
         RESULT = mol.appFront(mo);
     :}
  | 
     {:
         RESULT = BDL.MOptions();
     :}
  ;

medium_option ::=
     MAC STRING_LITERAL:s
     {:
         RESULT = BDL.MAC(s);
     :}
  |  IP STRING_LITERAL:s
     {:
         RESULT = BDL.IP(s);
     :}
  |  MASK STRING_LITERAL:s
     {:
         RESULT = BDL.MASK(s);
     :}
  |  GATE STRING_LITERAL:s
     {:
         RESULT = BDL.GATE(s);
     :}
  |  PORT DEC:v
     {:
         RESULT = BDL.PORTID(v);
     :}
  ;

scheduler ::=
     SCHEDULER:s code_block:cb
     {:
         RESULT = BDL.USER_DEFINED(pos(sleft), cb);
     :}
  ;

